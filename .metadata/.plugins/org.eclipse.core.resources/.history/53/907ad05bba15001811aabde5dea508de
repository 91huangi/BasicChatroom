import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
	private static ServerSocket serverSocket = null;
	private static Socket clientSocket;
	private static final ClientThread[] clients = new ClientThread[4];
	
	public static void main(String[] args) {
		
		// searching for open port
		int portNumber = 1024;
		
		for(portNumber = 1024; portNumber < 2000; portNumber ++) {
			try {
				serverSocket = new ServerSocket(portNumber);
				System.out.println("Server started at "+portNumber);
				break;
			} catch(IOException e) {
				System.out.println(portNumber + " is in use, scanning for next port");
				continue;
			}
		}

		
		try {
			
			// continuously wait for client to connect
			while(true) {
				clientSocket = serverSocket.accept();
				
				PrintStream os = new PrintStream(clientSocket.getOutputStream());
				DataInputStream is = new DataInputStream(clientSocket.getInputStream());
				os.println("*** Please enter your name ***");
				
				
				int i=0;
				
				for(i=0; i<4; i++) {
					if(clients[i]==null) {
						clients[i] = new ClientThread(portNumber, clientSocket, clients);
						clients[i].start();
						break;
					}
				}
				
				if(i==4) {
					os.println("Chat room is full, please try again later");
					os.close();
					System.out.println("5th person trying to sign in");
				}
				
				
				
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		

	}
	
}

class ClientThread extends Thread {
	
	int portNumber;
	String name;
	long timeStamp;
	Socket socket;
	PrintStream os;
	ClientThread[] clients;
	
	public ClientThread(int portNumber, Socket socket, ClientThread[] clients) {
		this.portNumber = portNumber;
		this.socket=socket;
		this.clients = clients;
		this.timeStamp = System.currentTimeMillis();
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public void run() {
		try {
			DataInputStream is = new DataInputStream(socket.getInputStream());
			os = new PrintStream(socket.getOutputStream());
		
			String line;
			while(true) {
				if((line = is.readLine())!= null) {
					if(name==null) {
						this.name=line;
						post("*** "+name+" joined the chat ***");
					} else {
						int secAgo=(int) (System.currentTimeMillis()-timeStamp)/1000;
						int minAgo=secAgo/60;
						secAgo = secAgo%60;
						timeStamp=System.currentTimeMillis();
						post(name+" ("+minAgo+" min "+secAgo+" sec ago) - "+line);		
					}

				}
			}

		} catch (IOException e) {
			post("*** "+name+" has left the chat ***");
		}
		
	}
	
	public void post(String message) {
		for(int i=0;i<clients.length;i++)
			if(clients[i] != null) clients[i].os.println(message);
	}
}
