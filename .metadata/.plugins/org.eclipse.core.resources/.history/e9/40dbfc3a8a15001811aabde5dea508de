import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
	private static ServerSocket serverSocket = null;
	private static Socket clientSocket;
	private static final clientThread[] clients = new clientThread[4];
	
	public static void main(String[] args) {
		int portNumber = 9999;
		try {
			serverSocket = new ServerSocket(portNumber);
			
			// iteratively wait for client to connect
			while(true) {
				clientSocket = serverSocket.accept();
				
				for(int i=0; i<4; i++) {
					if(clients[i]==null) {
						clients[i] = new clientThread(portNumber, clientSocket, clients);
						clients[i].run();
						break;
					}
				}
				
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		

	}
	
}

class clientThread extends Thread {
	
	int portNumber;
	Socket socket;
	PrintStream os;
	clientThread[] clients;
	
	public clientThread(int portNumber, Socket socket, clientThread[] clients) {
		this.portNumber = portNumber;
		this.socket=socket;
		this.clients = clients;
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public void run() {
		try {
			DataInputStream is = new DataInputStream(socket.getInputStream());
			os = new PrintStream(socket.getOutputStream());
		
			String line;
			while(true) {
				if((line = is.readLine())!= null) {
					for(int i=0;i<clients.length;i++) {
						if(clients[i] != null) clients[i].os.println(line);
					}
				}
			}

		} catch (IOException e) {
			
		}
		
	}
}
